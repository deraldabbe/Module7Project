Results for the extraLargeArray
insert 808.367583 ms
append 2.536584 ms

Timing Results:
{
  tiny: { append: 0.032125, insert: 0.028541999999999998 },
  small: { append: 0.005625, insert: 0.007042 },
  medium: { append: 0.028749999999999998, insert: 0.09958299999999999 },
  large: { append: 8.421208, insert: 6.749542 },
  extraLarge: { append: 1.279334, insert: 768.144333 }
}
Results for the extraLargeArray
insert 772.266417 ms
append 973.875 Î¼s

After running the timing results from the modified code, there is a clear pattern in how each function scales with different array sizes. 
As the array sizes increases both the doubler take more time to run, indicating a relationship between the array size and the excution time 
for both functions.When you compaire the two functions, doublerInsert show worse scaling to doublerAppend fromt he timing results.
The differences in the functions doublerAppend appends elements to the end of the new array which has a constant time complexity of O(1) for
each operation. DoublerInsert inserts the elemets at the begining of the new array using unsShift method. This has a time complexity of O(n) 
for each operation. So when the array size increases the time complexity of doublerInsert becomes higher then doublerAppend making it have longer
 execution times. DoublerAppend scales better then doublerInsert because its time complexity stays consistant regardless of the array size compaired
 to doublerInsert because of its higher time complexity.

 extra credit:
 DoublerInsert is alot slower compaired to doublerAppend because of the difference in the underlaying operations in each function.
 When an element is inserted at the begining of the array using unshift method, all the existing elements in the array need to be shifted one 
 postion to the right to make space for the new element.By doing this operation it results in a time complexity of O(n), where n is the number of
elements in the array. As the array size increases so do the number of shifting operations required. The results are increased by the total 
execution time of the function. DoublerAppend simply adds elements at the end of the array, which has a time complexity of O(1) since there is no 
need to shift existing elements.


